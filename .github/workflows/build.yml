name: Build

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - "docs/**"
      - "mkdocs.yml"
  pull_request:
    branches:
      - "master"
  workflow_dispatch:
    inputs:
      intergation-tests:
        type: boolean
        required: true
        default: false

env:
  BUILD_INCREMENT: 150
  PIP_DISABLE_PIP_VERSION_CHECK: on
  PIP_DEFAULT_TIMEOUT: 10
  PIP_PROGRESS_BAR: off

jobs:
  code-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          python-version: 3.11
      - run: uv tool install pre-commit
      - run: pre-commit run -a --show-diff-on-failure

  frontend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Restore cached build
        id: cache-build
        uses: actions/cache@v4
        with:
          path: frontend/build
          key: frontend-build-${{ hashFiles('frontend/**') }}
          restore-keys: |
            frontend-build-
      - name: Set up Node
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Install packages
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build dist
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm run build
      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  python-test:
    needs: [code-lint, frontend-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: uv sync --all-extras
      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: src/dstack/_internal/server/statics
      - name: Run pytest on POSIX
        if: matrix.os != 'windows-latest'
        # Skip Postgres tests on macos since macos runner doesn't have Docker.
        run: |
          RUNPOSTGRES=""
          if [ "${{ matrix.os }}" != "macos-latest" ]; then
            RUNPOSTGRES="--runpostgres"
          fi
          uv run pytest -n auto src/tests --runui $RUNPOSTGRES
      - name: Run pytest on Windows
        if: matrix.os == 'windows-latest'
        run: |
          uv run pytest -n auto src/tests --runui --runpostgres

  runner-test:
    defaults:
      run:
        working-directory: runner
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: runner/go.mod
          cache-dependency-path: runner/go.sum
      - name: Check if go.mod and go.sum are up-to-date
        run: go mod tidy -diff
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.62.0
          args: --timeout=20m
          working-directory: runner
      - name: Test
        # Do not run slow integration tests automatically.
        # Slow tests can be run manually via workflow_dispatch when required.
        run: |
          SHORT="-short"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.intergation-tests }}" == "true" ]]; then
              SHORT=""
            fi
          fi
          go version
          go fmt $(go list ./... | grep -v /vendor/)
          go vet $(go list ./... | grep -v /vendor/)
          go test $SHORT -race $(go list ./... | grep -v /vendor/)

  runner-compile:
    needs: [runner-test]
    defaults:
      run:
        working-directory: runner
    env:
      REPO_NAME: github.com/dstackai/dstack
    strategy:
      matrix:
        include:
          - { runs-on: "ubuntu-24.04", goos: "linux", goarch: "amd64" }
          - { runs-on: "ubuntu-24.04-arm", goos: "linux", goarch: "arm64" }
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: runner/go.mod
          cache-dependency-path: runner/go.sum
      - name: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION=$((${{ github.run_number }} + ${{ env.BUILD_INCREMENT }}))
          CGO_ENABLED=0 go build -ldflags "-X 'main.Version=$VERSION' -extldflags '-static'" -o dstack-runner-$GOOS-$GOARCH $REPO_NAME/runner/cmd/runner
          CGO_ENABLED=1 go build -ldflags "-X 'main.Version=$VERSION'" -o dstack-shim-$GOOS-$GOARCH $REPO_NAME/runner/cmd/shim
          echo $VERSION
      - uses: actions/upload-artifact@v4
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            runner/dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
            runner/dstack-shim-${{ matrix.goos }}-${{ matrix.goarch }}
          retention-days: 1
